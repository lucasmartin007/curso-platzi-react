basado en componentes. secciones que se reutilizan

es declarativo. declaramos el estado al que queremos llegar

__3

>>npm i webpack webpack-cli --save-dev

**src/index.js

console.log("Empezamos");

>>./node_modules/.bin/webpack src/index.js

>>node dist/main.js

>>npm install html-webpack-plugin --save-dev

**webpack.config.js

const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
output:{
filename:'app.bundle.js'
},plugins:[
new HtmlWebpackPlugin()
]
}

**package.json

..
"scripts":{
"build":"webpack",
"dev":"webpack-dev-server" //"webpack serve"
..
}

>>npm install webpack-dev-server --save-dev

__4

**src/index.js

import React from 'react'
import ReactDOM from 'react-dom'

//ReactDOM.render("Hola Platzi", document.body);

ReactDOM.render("Hola Platzi", document.getElementById("app"));

**src/index.html

!(emet)

title Petgram

div id 'app'

**webpack.config.js

plugins:[
new HtmlWebpackPlugin({
template:'src/index.html'
})
],
module:{
rules:[{
test:/\.js$/,
exclude:/node_modules/,
options:{
presets:[
'@babel-preset-env',
'@babel-preset-react'
]
}
}]
}

>>npm install @babel/core @babel/preset-env babel-loader --save-dev

>>npm install @babel/preset-react --save-dev

__6

>>npm install standard --save-dev

**package.json

..
"scripts":{
..
"now-build":"npm run build",
"lint":"standard"
},
"standard":{
"ignore":[
"/api/**"
]
},
"slintConfig":{
"extends":["./node_modules/standard/eslintrc.json"]
}

**now.json

{
"version":2,
"name":"petgram",
"builds":[{
"use":"@now/static-build",
"src":"package.json"
}],
"routes":[{
"src":"(.*).js", "dest":"/$1.js"
},{
"src":"(.*).json", "dest":"/$1.json"
},{
"src":"/.*", "dest":"/index.html"
}]
}

__

>>npm i react react-dom webpack wepack-cli html-webpack-plugin webpack-dev-server @babel/core @babel/preset-env babel-loader @babel/preset-react standard --save-dev

__8

>>npm install styled-components

**src/index.js

..
import { App } from "./app";

ReactDOM.render(<App />, document.getElementById("div_app"));

**src/App.js

import React from 'react';

import Category from "./components/Category";

export const App = () => (
<Category />
)

**src/components/Category/index.js

import React from 'react';

import { Anchor, Image } from "./styles";

const DEFAULT_IMAGE = 'https://i.imgur.com/dJa0Hpl.jpg';

export const Category = ({ cover = DEFAULT_IMAGE, path, emoji = '?' }) => (
Anchor href { path }
Image src { cover }
{ emoji }
)

**src/components/Category/styles.js

import styled from 'styled-components';

export const Anchor = styled.a`
display:flex;
flex-direction:column;
text-align:center;
text-decoration:none;
width:75px;
`;

export const Image = styled.img`
border:1px solid #ddd;
box-shadow:0px 10px 14px rgba(0,0,0,.2);
border-radius:50%;
height:auto;
overflow:hidden;
object-fit:cover;
height:75px;
width:75px;
`;

__9

**src/components/ListOfCategories/index.js

import React from "react";

import { Category } from "../Category";

export const ListOfCategories = () => {
return (
ul
{
[1, 2, 3].map(category => li key { category } <Category />
}
)
};

**src/App.js

..
import { ListOfCategories }
import { GlobalStyle }

..
div
<GlobalStyle />
<ListOfCategories />

**src/components/ListOfCategories/styles.js

import styled from "styled-components";

export const List = styled.ul`
display:flex;
overflow:scroll;
width:100%;
`;

export const Item = styled.li`
padding 0 8px;
`;

**src/GlobalStyles.js

import { createGlobalStyles } from "styled-components";

..

__10

**src/components/ListOfCategories/index.js

..
import { categories } from "../../../api/db.json";

..
categories.map(category => Item key {category.id} <Category {...category} />)

__11

**src/components/PhotoCard/index.js

import React from "react";

import { ImgWrapper, Img, Button } from "./styles";

import { MdFavoriteBorder } from "react-icons/md";

const DEFAULT_IMAGE = "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60";

export const PhotoCard = ({
id, likes = 0, src = DEFAULT_IMAGE
}) => {
return (
article
a href = { `/detail/${id}` }
ImgWrapper
Img src = { src }

Button
<MdFavoriteBorder size = "32" />{ likes } likes!

);
}

**App.js

import { PhotoCard } from "./components/PhotoCard";

..
<PhotoCard />

**src/components/PhotoCard/styles.js

import styled from "styled-components";

..

>>npm install react-icons

**src/components/ListOfPhotoCards/index.js

import React from "react";

import { PhotoCard } from "../PhotoCard";

export const ListOfPhotoCards = () => {
ul
{[1,2,3].map(id => <PhotoCard key = { id } />}
}

__12

--maketext.io

--jakearchibald.github.io/svgomg

--smooth-code.com/open-source/svgr/playground

**src/components/Logo/index.js

import { Svg } from "./styles";

...

**src/components/Logo/styles.js

import "styled" from "styled-components";

export const Svg = styled.svg`
width:220px;
margin-left:-10px;
margin-top:-30px;
`;

**src/App.js

..
Logo

__13

**src/components/PhotoCard/styles.js

import { fadeIn } from "../../styles/animation";

..
export const Img = styled.img`
${fadeIn({ time:"5s" })}
`;

**src/styles/animation.js

import { css, keyframes } from "styled-components";

const fadeIn = ({ time = "1s", type = "ease" } = {}) => css `animation:${time} ${fadeInKeyframes} ${type}`;

const fadeInKeyframes = keyframes`
from{
filter:blur(5px);
opacity:0;
}

to{
filter:blur(0);
opacity:1;
}
`;

__14

**src/components/ListOfCategories/index.js

import React, { useEffect, useState } from "react";

import { categories as mockCategories } from "../../../api/db.json";

..
const [categories, setCategories] = useState([]);

useEffect(function(){
window.fetch("https://petgram-server-gamma-three.vercel.app/categories")
.then(res => {
setCategories(res);
});
});

__15

..

const [showFixed, setShowFixed] = useState(false);

useEffect(function(){
const onScroll = e => {
const newShowFixed = window.scrollY > 200
showFixed !== newShowFixed && setShowFixed(newShowFixed)
}

document.addEventListener("scroll", onScroll);
});

return () => document.removeEventListener("scroll", onScroll);
}, [showFixed]);

const renderList = (fixed) => {
List classname = { fixed ? "fixed":"" }>
}

return (
Fragment
{renderList()}
{showFixed && renderList(true)}
)

**styles

&.fixed{
...
}

__16

**src/components/ListOfCategories/index.js

function useCategoriesData(){
const [loading, setLoading] = useState(true);

const [categories, setCategories] = ...;

const [loading, setLoading] = ...;

useEffect(function(){
setLoading(true);
..
setLoading(false);
} );

return { categories, loading };
}

..
const { categories, loading } = useCategoriesData();
..
if(loading){
return "Cargando...";
}
..
List fixed = { fixed }
{
loading ? Item key = "loading" Category : categories.map(...)
}

**src/components/ListOfCategories/styles.js

${ props => props.fixed && css`
...
` }

__17

**src/components/ListOfPhotoCards/index.js

..
{ [1, 2, 3, 4, 5, 6, 7].map(...) }

**src/components/PhotoCard/index.js

..
const element = useRef(null);

const [show, setShow] = useState(false);

useEffect(function(){
//console.log(element.current);
const observer = new window.IntersectionObserver(function(entries){
const { isIntersecting } = entries[0];
//console.log(entries);
//console.log({ isIntercepting });
if(isIntercepting){
console.log("Si");
setShow(true);
observer.disconnect();
}
});
observer.observe(element.current);
}, [element]);

return(
Article ref = { element }
{
show && <Fragment>
}

);

**src/components/PhotoCard/styles.js

..
export const Article = styled.article`
min-height:100px;
`;

__18

>>npm install intersection-observer

**src/components/PhotoCard/index.js

..
Promise.resolve(
typeof window.IntersectionObserver !== "undefined" ? window.IntersectionObserver : import("intersection-observer")
).then(() => {
...
});

>>npm install @babel/plugin-syntax-dynamic-import --save-dev

**webpack.config.js

..
loader babel-loader
options
plugins: ["@babel/plugin-syntax-dynamic-import"]

>>npm install babel-eslint --save-dev

**package.json

..
eslintConfig
parser: "babel-eslint"

__19

**src/components/PhotoCard/index.js

..
import { MdFavorite } from "react-icons/md";

..
const key = `like-${id}`;
..
const [liked, setLiked] = useState(() => {
try{
const like = window.localStorage.getItem(key);
return like;
}catch(error){
return false;
}
});
..
console.log(liked);
..
const Icon = liked ? MdFavorite : MdFavoriteBorder;
const setLocalStorage = value => {
try{
window.localStorage.setItem(key, value);
setLiked(value);
}catch(error){
console.error(error);
}
}
..
Button onClick = { () => setLocalStorage(!liked) }
Icon

**ListOfPhotoCards

..
PhotoCard key = { id } id = { id }

__20

**PhotoCard

function useLocalStorage(key, initialValue){
const [storedValue, setValue] = useState(() => {
try{
const item = window.localStorage.getItem(key);
return item !== null ? JSON.parse(item) : initialValue;
}catch(error){
return initialValue;
}
} );

const setLocalStorage = value => {
try{
window.localStorage.setItem(key, JSON.stringify(value));
setValue(value);
}catch(error){
console.error(error);
}
}
return [storedValue, setLocalStorage];

}

..
const [show, element] = useNearScreen();
..
const [liked, setLiked] = useLocalStorage(key, false);
..
Button onClick = {() => setLiked(!liked)}

**src/hooks/useLocalStorage.js

export function useLocalStorage(...){...}

**src/hooks/useNearScreen.js

export function useNearScreen(){
const element = useRef(null);
const [show, setShow] = useState(false);
..
return [show, element];
}

__21

>>npm install @apollo/client graphql

**index

import ApolloClient from "apollo-boost";
import { ApolloProvider } from "react-apollo";

..
const client = new ApolloClient({
uri:"..."
});

ReactDOM.render(
ApolloProvider client = { client }
App
);

**ListOfPhotoCards

import { graphql } from "react-apollo";
import { gql } from "apollo-boost";

const withPhotos = graphql(gql`
query getPhotos{
photos{
id
categoryId
src
likes
userId
liked
}
}
`);

const ListOfPhotoCardsComponent = ({ data: { photos = [] } } = {}) => {
return (
ul
photos.map(photo => Photo>Card key = { photo.id } { ...photo })
);
}

export const ListOfPhotoCards = withPhotos(ListOfPhotoCardsComponent);

__22

**ListOfPhotoCards

const withPhotos = gql`
query getPhotos($categoryId: ID){
photos(categoryId: $categoryID){...}
}
`;

**App

ListOfPhotoCards categoryId = { 2 }

**src/hoc/withPhotos.js

...

**src/container/ListOfPhotoCards.js

...

__23

export const App = () => {
const urlParams = new window.URLSearchParams(window.location.search);
const detailId = urlParams.get("detail");
console.log(detailId);
..
{
detailId ? PhotoCardWithQuery id = { detailId } : ...
}
}

**src/container/PhotoCardWithQuery.js

const query = gql`
query getSinglePhoto($id:ID!){
photo(id:$id){...}
}
`;

export const PhotoCardWithQuery = ( { id } ) => (
Query query = { query } variables = {{ id }}
{
({ loading, error, data }) => const { photo = {} } = data
PhotoCard { ...photo }
}
)

__24

**PhotoCardWithQuery

const GET_SINGLE_PHOTO = ...

const renderProp = ({ loading, error, data }) => {
if(loading) return p Loading

if(error) return p Error
...
}

..
Query query = { GET_SINGLE_PHOTO } variables = {{ id }}
{ renderProp }

**withPhotos

const GET_PHOTOS = ...

__25

**FavButton

export const FavButton = ({ liked, likes, onClick }) => {
return(
Button ...
)
}

**FavButton/styles.js

...

**PhotoCard

..
const handleFavClick = () => setLiked(!liked);
..
ToggleLikeMutation
{ (toggleLike) => {
const handleFavClick = () => {
!liked && toggleLike({ variables: { input: { id } } });
setLiked(!liked);
}
return FavButton liked = { liked } likes = { likes } onClick = { handleFavClick }
}

**src/container/ToggleLikeMutation

const LIKE_PHOTO = gql`...`;

export const ToggleLikeMutation = ({ children }) => {
return Mutation mutation = { LIKE_PHOTO }
{ children }
}
