basado en componentes. secciones que se reutilizan

es declarativo. declaramos el estado al que queremos llegar

__3

>>npm i webpack webpack-cli --save-dev

**src/index.js

console.log("Empezamos");

>>./node_modules/.bin/webpack src/index.js

>>node dist/main.js

>>npm install html-webpack-plugin --save-dev

**webpack.config.js

const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
output:{
filename:'app.bundle.js'
},plugins:[
new HtmlWebpackPlugin()
]
}

**package.json

..
"scripts":{
"build":"webpack",
"dev":"webpack-dev-server" //"webpack serve"
..
}

>>npm install webpack-dev-server --save-dev

__4

**src/index.js

import React from 'react'
import ReactDOM from 'react-dom'

//ReactDOM.render("Hola Platzi", document.body);

ReactDOM.render("Hola Platzi", document.getElementById("app"));

**src/index.html

!(emet)

title Petgram

div id 'app'

**webpack.config.js

plugins:[
new HtmlWebpackPlugin({
template:'src/index.html'
})
],
module:{
rules:[{
test:/\.js$/,
exclude:/node_modules/,
options:{
presets:[
'@babel-preset-env',
'@babel-preset-react'
]
}
}]
}

>>npm install @babel/core @babel/preset-env babel-loader --save-dev

>>npm install @babel/preset-react --save-dev

__6

>>npm install standard --save-dev

**package.json

..
"scripts":{
..
"now-build":"npm run build",
"lint":"standard"
},
"standard":{
"ignore":[
"/api/**"
]
},
"slintConfig":{
"extends":["./node_modules/standard/eslintrc.json"]
}

**now.json

{
"version":2,
"name":"petgram",
"builds":[{
"use":"@now/static-build",
"src":"package.json"
}],
"routes":[{
"src":"(.*).js", "dest":"/$1.js"
},{
"src":"(.*).json", "dest":"/$1.json"
},{
"src":"/.*", "dest":"/index.html"
}]
}
